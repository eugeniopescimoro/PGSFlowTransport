from operator import itemgetter
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.image as img
import os
import re
cl = []
lcorr = []
mvel = []
for i in range(1, 31): # Range of simulations which should be plotted
    os.chdir('TS%d/system' % i)
    with open("setRandomFieldDict") as RF:
        for line in RF:
            if "Lcorr" in line:
                lcorr.append([float(i) for i in re.split(' |\(|\)', line)[slice(12, 15)]])
                break
    os.chdir('..')
    with open("log") as log:
        for _ in range(10): # It skips the first 225 to avoid some misleading "Time =" occurencies
            next(log)
        for line in log: # It greps all the relevant data from the log file
            if "Mean velocity  =" in line:
                mvel.append([float(i) for i in re.split(' |\(|\)', line)[slice(5, 8)]])
                break
    os.chdir('..')
with open("corrLengths.mat") as CL:
    for line in CL:
        if not any(value in line for value in "#"):
                cl.append([float(i) for i in re.split(' ', line)[slice(1, 4)]])
    cl = [sublist for sublist in cl if any(sublist)] # It deletes the empty sublists generated by Octave
x = list(map(itemgetter(0), cl))
y = list(map(itemgetter(1), cl))
z = list(map(itemgetter(2), cl))
font = {'size': 24}
fig = plt.figure(figsize=(14, 14))
###############################################################################
#This part plots a 3d representation of correlation lengths and the average Vx
ax = fig.add_subplot(2, 2, 1, projection='3d') 
ax.plot3D(x[:10], y[:10], z[:10], 'ro')
ax.plot3D(x[11:20], y[11:20], z[11:20], 'bo')
ax.plot3D(x[21:30], y[21:30], z[21:30], 'go')
ax.set_xlabel('\n' + 'Lx [m]', linespacing = 2, fontdict = font)
ax.set_ylabel('\n' + 'Ly [m]', linespacing = 2, fontdict = font)
ax.set_zlabel('\n' + 'Lz [m]', linespacing = 2, fontdict = font)
ax.set_title('Correlation lengths', fontdict = font)
ax.tick_params(labelsize = 24)
ax = fig.add_subplot(2, 2, 2)
ax.plot(list([i for i in range(10)]), list(map(itemgetter(0), mvel[:10])), 'ro')
ax.plot(list([i for i in range(11, 20)]), list(map(itemgetter(0), mvel[11:20])), 'bo')
ax.plot(list([i for i in range(21, 30)]), list(map(itemgetter(0), mvel[21:30])), 'go')
ax.set_xlabel('Simulation number [-]', fontdict=font)
ax.set_ylabel('Average Vx [m/s]', fontdict = font)
ax.ticklabel_format(axis = 'y', style = 'sci', scilimits = (0,0))
ax.tick_params(labelsize = 24)
###############################################################################
#This part plots the K and velocity field taken from png images
#ax = fig.add_subplot(2, 2, 1)
#Kfield = img.imread('/home/pmxep5/Pictures/veLcorr/TS15/TS15K.png')
#plt.axis('off')
#plt.imshow(Kfield)
#ax.text(0.05, 0.95, "A", transform=ax.transAxes, ha="left", va="top", fontsize=24)
#ax = fig.add_subplot(2, 2, 2)
#Kfield = img.imread('/home/pmxep5/Pictures/veLcorr/TS15/TS15p.png')
#plt.axis('off')
#plt.imshow(Kfield)
#ax.text(0.05, 0.95, "B", transform=ax.transAxes, ha="left", va="top", fontsize=24)
###############################################################################
ax = fig.add_subplot(2, 2, 3)
ax.plot(list([i for i in range(10)]), list(map(itemgetter(1), mvel[:10])), 'ro')
ax.plot(list([i for i in range(11, 20)]), list(map(itemgetter(1), mvel[11:20])), 'bo')
ax.plot(list([i for i in range(21, 30)]), list(map(itemgetter(1), mvel[21:30])), 'go')
ax.set_xlabel('Simulation number [-]', fontdict=font)
ax.set_ylabel('Average Vy [m/s]', fontdict = font)
ax.text(0.05, 0.95, "C", transform=ax.transAxes, ha="left", va="top", fontsize=24)
ax.tick_params(labelsize = 24)
ax = fig.add_subplot(2, 2, 4)
ax.plot(list([i for i in range(10)]), list(map(itemgetter(2), mvel[:10])), 'ro')
ax.plot(list([i for i in range(11, 20)]), list(map(itemgetter(2), mvel[11:20])), 'bo')
ax.plot(list([i for i in range(21, 30)]), list(map(itemgetter(2), mvel[21:30])), 'go')
ax.set_xlabel('Simulation number [-]', fontdict=font)
ax.set_ylabel('Average Vz [m/s]', fontdict = font)
ax.text(0.05, 0.95, "D", transform=ax.transAxes, ha="left", va="top", fontsize=24)
ax.tick_params(labelsize = 24)
plt.tight_layout()
fig.savefig("aveVelCorr.pdf")
#fig.savefig("aveKVelCorr.pdf")
plt.show()